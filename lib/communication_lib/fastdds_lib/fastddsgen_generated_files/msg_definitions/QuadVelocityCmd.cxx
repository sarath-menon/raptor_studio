// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuadVelocityCmd.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "QuadVelocityCmd.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::QuadVelocityCmd::QuadVelocityCmd()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6d2a209c

    // m_velocity com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@75329a49

    // m_yaw_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@161479c6
    m_yaw_rate = 0.0;

}

idl_msg::QuadVelocityCmd::~QuadVelocityCmd()
{



}

idl_msg::QuadVelocityCmd::QuadVelocityCmd(
        const QuadVelocityCmd& x)
{
    m_header = x.m_header;
    m_velocity = x.m_velocity;
    m_yaw_rate = x.m_yaw_rate;
}

idl_msg::QuadVelocityCmd::QuadVelocityCmd(
        QuadVelocityCmd&& x)
{
    m_header = std::move(x.m_header);
    m_velocity = std::move(x.m_velocity);
    m_yaw_rate = x.m_yaw_rate;
}

idl_msg::QuadVelocityCmd& idl_msg::QuadVelocityCmd::operator =(
        const QuadVelocityCmd& x)
{

    m_header = x.m_header;
    m_velocity = x.m_velocity;
    m_yaw_rate = x.m_yaw_rate;

    return *this;
}

idl_msg::QuadVelocityCmd& idl_msg::QuadVelocityCmd::operator =(
        QuadVelocityCmd&& x)
{

    m_header = std::move(x.m_header);
    m_velocity = std::move(x.m_velocity);
    m_yaw_rate = x.m_yaw_rate;

    return *this;
}

size_t idl_msg::QuadVelocityCmd::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += idl_msg::Velocity::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::QuadVelocityCmd::getCdrSerializedSize(
        const idl_msg::QuadVelocityCmd& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += idl_msg::Velocity::getCdrSerializedSize(data.velocity(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::QuadVelocityCmd::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_velocity;
    scdr << m_yaw_rate;

}

void idl_msg::QuadVelocityCmd::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_velocity;
    dcdr >> m_yaw_rate;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void idl_msg::QuadVelocityCmd::header(
        const idl_msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void idl_msg::QuadVelocityCmd::header(
        idl_msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const idl_msg::Header& idl_msg::QuadVelocityCmd::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
idl_msg::Header& idl_msg::QuadVelocityCmd::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member velocity
 * @param _velocity New value to be copied in member velocity
 */
void idl_msg::QuadVelocityCmd::velocity(
        const idl_msg::Velocity& _velocity)
{
    m_velocity = _velocity;
}

/*!
 * @brief This function moves the value in member velocity
 * @param _velocity New value to be moved in member velocity
 */
void idl_msg::QuadVelocityCmd::velocity(
        idl_msg::Velocity&& _velocity)
{
    m_velocity = std::move(_velocity);
}

/*!
 * @brief This function returns a constant reference to member velocity
 * @return Constant reference to member velocity
 */
const idl_msg::Velocity& idl_msg::QuadVelocityCmd::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
idl_msg::Velocity& idl_msg::QuadVelocityCmd::velocity()
{
    return m_velocity;
}
/*!
 * @brief This function sets a value in member yaw_rate
 * @param _yaw_rate New value for member yaw_rate
 */
void idl_msg::QuadVelocityCmd::yaw_rate(
        float _yaw_rate)
{
    m_yaw_rate = _yaw_rate;
}

/*!
 * @brief This function returns the value of member yaw_rate
 * @return Value of member yaw_rate
 */
float idl_msg::QuadVelocityCmd::yaw_rate() const
{
    return m_yaw_rate;
}

/*!
 * @brief This function returns a reference to member yaw_rate
 * @return Reference to member yaw_rate
 */
float& idl_msg::QuadVelocityCmd::yaw_rate()
{
    return m_yaw_rate;
}


size_t idl_msg::QuadVelocityCmd::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::QuadVelocityCmd::isKeyDefined()
{
    return false;
}

void idl_msg::QuadVelocityCmd::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

